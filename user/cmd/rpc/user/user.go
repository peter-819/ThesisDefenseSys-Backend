// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package user

import (
	"context"

	"TDS-backend/user/cmd/rpc/types/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetTeacherByIdRequest  = user.GetTeacherByIdRequest
	GetTeacherListRequest  = user.GetTeacherListRequest
	GetTeacherListResponse = user.GetTeacherListResponse
	IdRequest              = user.IdRequest
	RegisterBatchRequest   = user.RegisterBatchRequest
	RegisterBatchResponse  = user.RegisterBatchResponse
	RegisterRequest        = user.RegisterRequest
	RegisterResponse       = user.RegisterResponse
	SetTeacherInfoRequest  = user.SetTeacherInfoRequest
	SetTeacherInfoResponse = user.SetTeacherInfoResponse
	TeacherInfo            = user.TeacherInfo
	TokenRequest           = user.TokenRequest
	TokenResponse          = user.TokenResponse
	UserResponse           = user.UserResponse

	User interface {
		GetUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserResponse, error)
		GetToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		RegisterBatch(ctx context.Context, in *RegisterBatchRequest, opts ...grpc.CallOption) (*RegisterBatchResponse, error)
		GetTeacherList(ctx context.Context, in *GetTeacherListRequest, opts ...grpc.CallOption) (*GetTeacherListResponse, error)
		GetTeacher(ctx context.Context, in *GetTeacherByIdRequest, opts ...grpc.CallOption) (*TeacherInfo, error)
		SetTeacherInfo(ctx context.Context, in *SetTeacherInfoRequest, opts ...grpc.CallOption) (*SetTeacherInfoResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) GetUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

func (m *defaultUser) GetToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetToken(ctx, in, opts...)
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) RegisterBatch(ctx context.Context, in *RegisterBatchRequest, opts ...grpc.CallOption) (*RegisterBatchResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.RegisterBatch(ctx, in, opts...)
}

func (m *defaultUser) GetTeacherList(ctx context.Context, in *GetTeacherListRequest, opts ...grpc.CallOption) (*GetTeacherListResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetTeacherList(ctx, in, opts...)
}

func (m *defaultUser) GetTeacher(ctx context.Context, in *GetTeacherByIdRequest, opts ...grpc.CallOption) (*TeacherInfo, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetTeacher(ctx, in, opts...)
}

func (m *defaultUser) SetTeacherInfo(ctx context.Context, in *SetTeacherInfoRequest, opts ...grpc.CallOption) (*SetTeacherInfoResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SetTeacherInfo(ctx, in, opts...)
}
