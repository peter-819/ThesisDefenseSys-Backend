// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package teacher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeacherServiceClient is the client API for TeacherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeacherServiceClient interface {
	AddTeacher(ctx context.Context, in *AddTeacherRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	RemoveTeacher(ctx context.Context, in *RemoveTeacherRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ModifyTeacher(ctx context.Context, in *ModifyTeacherRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	QueryAllTeacher(ctx context.Context, in *QueryAllTeacherRequest, opts ...grpc.CallOption) (*QueryTeachersResponse, error)
	QueryTeacher(ctx context.Context, in *QueryTeacherRequest, opts ...grpc.CallOption) (*QueryTeacherResponse, error)
	QueryAvailableTeachers(ctx context.Context, in *QueryAvailableTeachersRequest, opts ...grpc.CallOption) (*QueryTeachersResponse, error)
}

type teacherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeacherServiceClient(cc grpc.ClientConnInterface) TeacherServiceClient {
	return &teacherServiceClient{cc}
}

func (c *teacherServiceClient) AddTeacher(ctx context.Context, in *AddTeacherRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/teacher.TeacherService/AddTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) RemoveTeacher(ctx context.Context, in *RemoveTeacherRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/teacher.TeacherService/RemoveTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) ModifyTeacher(ctx context.Context, in *ModifyTeacherRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/teacher.TeacherService/ModifyTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) QueryAllTeacher(ctx context.Context, in *QueryAllTeacherRequest, opts ...grpc.CallOption) (*QueryTeachersResponse, error) {
	out := new(QueryTeachersResponse)
	err := c.cc.Invoke(ctx, "/teacher.TeacherService/QueryAllTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) QueryTeacher(ctx context.Context, in *QueryTeacherRequest, opts ...grpc.CallOption) (*QueryTeacherResponse, error) {
	out := new(QueryTeacherResponse)
	err := c.cc.Invoke(ctx, "/teacher.TeacherService/QueryTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) QueryAvailableTeachers(ctx context.Context, in *QueryAvailableTeachersRequest, opts ...grpc.CallOption) (*QueryTeachersResponse, error) {
	out := new(QueryTeachersResponse)
	err := c.cc.Invoke(ctx, "/teacher.TeacherService/QueryAvailableTeachers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeacherServiceServer is the server API for TeacherService service.
// All implementations must embed UnimplementedTeacherServiceServer
// for forward compatibility
type TeacherServiceServer interface {
	AddTeacher(context.Context, *AddTeacherRequest) (*EmptyResponse, error)
	RemoveTeacher(context.Context, *RemoveTeacherRequest) (*EmptyResponse, error)
	ModifyTeacher(context.Context, *ModifyTeacherRequest) (*EmptyResponse, error)
	QueryAllTeacher(context.Context, *QueryAllTeacherRequest) (*QueryTeachersResponse, error)
	QueryTeacher(context.Context, *QueryTeacherRequest) (*QueryTeacherResponse, error)
	QueryAvailableTeachers(context.Context, *QueryAvailableTeachersRequest) (*QueryTeachersResponse, error)
	mustEmbedUnimplementedTeacherServiceServer()
}

// UnimplementedTeacherServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTeacherServiceServer struct {
}

func (UnimplementedTeacherServiceServer) AddTeacher(context.Context, *AddTeacherRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTeacher not implemented")
}
func (UnimplementedTeacherServiceServer) RemoveTeacher(context.Context, *RemoveTeacherRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTeacher not implemented")
}
func (UnimplementedTeacherServiceServer) ModifyTeacher(context.Context, *ModifyTeacherRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyTeacher not implemented")
}
func (UnimplementedTeacherServiceServer) QueryAllTeacher(context.Context, *QueryAllTeacherRequest) (*QueryTeachersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllTeacher not implemented")
}
func (UnimplementedTeacherServiceServer) QueryTeacher(context.Context, *QueryTeacherRequest) (*QueryTeacherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTeacher not implemented")
}
func (UnimplementedTeacherServiceServer) QueryAvailableTeachers(context.Context, *QueryAvailableTeachersRequest) (*QueryTeachersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAvailableTeachers not implemented")
}
func (UnimplementedTeacherServiceServer) mustEmbedUnimplementedTeacherServiceServer() {}

// UnsafeTeacherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeacherServiceServer will
// result in compilation errors.
type UnsafeTeacherServiceServer interface {
	mustEmbedUnimplementedTeacherServiceServer()
}

func RegisterTeacherServiceServer(s grpc.ServiceRegistrar, srv TeacherServiceServer) {
	s.RegisterService(&TeacherService_ServiceDesc, srv)
}

func _TeacherService_AddTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).AddTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teacher.TeacherService/AddTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).AddTeacher(ctx, req.(*AddTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_RemoveTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).RemoveTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teacher.TeacherService/RemoveTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).RemoveTeacher(ctx, req.(*RemoveTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_ModifyTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).ModifyTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teacher.TeacherService/ModifyTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).ModifyTeacher(ctx, req.(*ModifyTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_QueryAllTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).QueryAllTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teacher.TeacherService/QueryAllTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).QueryAllTeacher(ctx, req.(*QueryAllTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_QueryTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).QueryTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teacher.TeacherService/QueryTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).QueryTeacher(ctx, req.(*QueryTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_QueryAvailableTeachers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAvailableTeachersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).QueryAvailableTeachers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teacher.TeacherService/QueryAvailableTeachers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).QueryAvailableTeachers(ctx, req.(*QueryAvailableTeachersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeacherService_ServiceDesc is the grpc.ServiceDesc for TeacherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeacherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teacher.TeacherService",
	HandlerType: (*TeacherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTeacher",
			Handler:    _TeacherService_AddTeacher_Handler,
		},
		{
			MethodName: "RemoveTeacher",
			Handler:    _TeacherService_RemoveTeacher_Handler,
		},
		{
			MethodName: "ModifyTeacher",
			Handler:    _TeacherService_ModifyTeacher_Handler,
		},
		{
			MethodName: "QueryAllTeacher",
			Handler:    _TeacherService_QueryAllTeacher_Handler,
		},
		{
			MethodName: "QueryTeacher",
			Handler:    _TeacherService_QueryTeacher_Handler,
		},
		{
			MethodName: "QueryAvailableTeachers",
			Handler:    _TeacherService_QueryAvailableTeachers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teacher.proto",
}
