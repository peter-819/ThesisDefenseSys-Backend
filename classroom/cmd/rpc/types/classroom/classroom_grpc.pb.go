// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package classroom

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClassroomServiceClient is the client API for ClassroomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassroomServiceClient interface {
	QueryAllClassrooms(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*QueryClassroomsResponse, error)
	QueryClassroom(ctx context.Context, in *QueryClassroomRequest, opts ...grpc.CallOption) (*Classroom, error)
	QueryAvailableByTime(ctx context.Context, in *QueryByTimeRequest, opts ...grpc.CallOption) (*QueryClassroomsResponse, error)
	RemoveClassroom(ctx context.Context, in *RemoveClassroomRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type classroomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClassroomServiceClient(cc grpc.ClientConnInterface) ClassroomServiceClient {
	return &classroomServiceClient{cc}
}

func (c *classroomServiceClient) QueryAllClassrooms(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*QueryClassroomsResponse, error) {
	out := new(QueryClassroomsResponse)
	err := c.cc.Invoke(ctx, "/classroom.ClassroomService/QueryAllClassrooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classroomServiceClient) QueryClassroom(ctx context.Context, in *QueryClassroomRequest, opts ...grpc.CallOption) (*Classroom, error) {
	out := new(Classroom)
	err := c.cc.Invoke(ctx, "/classroom.ClassroomService/QueryClassroom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classroomServiceClient) QueryAvailableByTime(ctx context.Context, in *QueryByTimeRequest, opts ...grpc.CallOption) (*QueryClassroomsResponse, error) {
	out := new(QueryClassroomsResponse)
	err := c.cc.Invoke(ctx, "/classroom.ClassroomService/QueryAvailableByTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classroomServiceClient) RemoveClassroom(ctx context.Context, in *RemoveClassroomRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/classroom.ClassroomService/RemoveClassroom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassroomServiceServer is the server API for ClassroomService service.
// All implementations must embed UnimplementedClassroomServiceServer
// for forward compatibility
type ClassroomServiceServer interface {
	QueryAllClassrooms(context.Context, *EmptyRequest) (*QueryClassroomsResponse, error)
	QueryClassroom(context.Context, *QueryClassroomRequest) (*Classroom, error)
	QueryAvailableByTime(context.Context, *QueryByTimeRequest) (*QueryClassroomsResponse, error)
	RemoveClassroom(context.Context, *RemoveClassroomRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedClassroomServiceServer()
}

// UnimplementedClassroomServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClassroomServiceServer struct {
}

func (UnimplementedClassroomServiceServer) QueryAllClassrooms(context.Context, *EmptyRequest) (*QueryClassroomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllClassrooms not implemented")
}
func (UnimplementedClassroomServiceServer) QueryClassroom(context.Context, *QueryClassroomRequest) (*Classroom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryClassroom not implemented")
}
func (UnimplementedClassroomServiceServer) QueryAvailableByTime(context.Context, *QueryByTimeRequest) (*QueryClassroomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAvailableByTime not implemented")
}
func (UnimplementedClassroomServiceServer) RemoveClassroom(context.Context, *RemoveClassroomRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveClassroom not implemented")
}
func (UnimplementedClassroomServiceServer) mustEmbedUnimplementedClassroomServiceServer() {}

// UnsafeClassroomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassroomServiceServer will
// result in compilation errors.
type UnsafeClassroomServiceServer interface {
	mustEmbedUnimplementedClassroomServiceServer()
}

func RegisterClassroomServiceServer(s grpc.ServiceRegistrar, srv ClassroomServiceServer) {
	s.RegisterService(&ClassroomService_ServiceDesc, srv)
}

func _ClassroomService_QueryAllClassrooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassroomServiceServer).QueryAllClassrooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/classroom.ClassroomService/QueryAllClassrooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassroomServiceServer).QueryAllClassrooms(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassroomService_QueryClassroom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClassroomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassroomServiceServer).QueryClassroom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/classroom.ClassroomService/QueryClassroom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassroomServiceServer).QueryClassroom(ctx, req.(*QueryClassroomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassroomService_QueryAvailableByTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryByTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassroomServiceServer).QueryAvailableByTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/classroom.ClassroomService/QueryAvailableByTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassroomServiceServer).QueryAvailableByTime(ctx, req.(*QueryByTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassroomService_RemoveClassroom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveClassroomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassroomServiceServer).RemoveClassroom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/classroom.ClassroomService/RemoveClassroom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassroomServiceServer).RemoveClassroom(ctx, req.(*RemoveClassroomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClassroomService_ServiceDesc is the grpc.ServiceDesc for ClassroomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClassroomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "classroom.ClassroomService",
	HandlerType: (*ClassroomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryAllClassrooms",
			Handler:    _ClassroomService_QueryAllClassrooms_Handler,
		},
		{
			MethodName: "QueryClassroom",
			Handler:    _ClassroomService_QueryClassroom_Handler,
		},
		{
			MethodName: "QueryAvailableByTime",
			Handler:    _ClassroomService_QueryAvailableByTime_Handler,
		},
		{
			MethodName: "RemoveClassroom",
			Handler:    _ClassroomService_RemoveClassroom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "classroom.proto",
}
