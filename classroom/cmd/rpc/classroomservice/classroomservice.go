// Code generated by goctl. DO NOT EDIT!
// Source: classroom.proto

package classroomservice

import (
	"context"

	"TDS-backend/classroom/cmd/rpc/types/classroom"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Classroom               = classroom.Classroom
	EmptyRequest            = classroom.EmptyRequest
	EmptyResponse           = classroom.EmptyResponse
	QueryByTimeRequest      = classroom.QueryByTimeRequest
	QueryClassroomRequest   = classroom.QueryClassroomRequest
	QueryClassroomResponse  = classroom.QueryClassroomResponse
	QueryClassroomsResponse = classroom.QueryClassroomsResponse
	RemoveClassroomRequest  = classroom.RemoveClassroomRequest

	ClassroomService interface {
		QueryAllClassrooms(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*QueryClassroomsResponse, error)
		QueryClassroom(ctx context.Context, in *QueryClassroomRequest, opts ...grpc.CallOption) (*Classroom, error)
		QueryAvailableByTime(ctx context.Context, in *QueryByTimeRequest, opts ...grpc.CallOption) (*QueryClassroomsResponse, error)
		RemoveClassroom(ctx context.Context, in *RemoveClassroomRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	}

	defaultClassroomService struct {
		cli zrpc.Client
	}
)

func NewClassroomService(cli zrpc.Client) ClassroomService {
	return &defaultClassroomService{
		cli: cli,
	}
}

func (m *defaultClassroomService) QueryAllClassrooms(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*QueryClassroomsResponse, error) {
	client := classroom.NewClassroomServiceClient(m.cli.Conn())
	return client.QueryAllClassrooms(ctx, in, opts...)
}

func (m *defaultClassroomService) QueryClassroom(ctx context.Context, in *QueryClassroomRequest, opts ...grpc.CallOption) (*Classroom, error) {
	client := classroom.NewClassroomServiceClient(m.cli.Conn())
	return client.QueryClassroom(ctx, in, opts...)
}

func (m *defaultClassroomService) QueryAvailableByTime(ctx context.Context, in *QueryByTimeRequest, opts ...grpc.CallOption) (*QueryClassroomsResponse, error) {
	client := classroom.NewClassroomServiceClient(m.cli.Conn())
	return client.QueryAvailableByTime(ctx, in, opts...)
}

func (m *defaultClassroomService) RemoveClassroom(ctx context.Context, in *RemoveClassroomRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	client := classroom.NewClassroomServiceClient(m.cli.Conn())
	return client.RemoveClassroom(ctx, in, opts...)
}
