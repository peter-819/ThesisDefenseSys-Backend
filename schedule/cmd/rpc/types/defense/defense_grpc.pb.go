// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package defense

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DefenseServiceClient is the client API for DefenseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DefenseServiceClient interface {
	QueryAllDefenses(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*QueryAllDefensesReply, error)
}

type defenseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDefenseServiceClient(cc grpc.ClientConnInterface) DefenseServiceClient {
	return &defenseServiceClient{cc}
}

func (c *defenseServiceClient) QueryAllDefenses(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*QueryAllDefensesReply, error) {
	out := new(QueryAllDefensesReply)
	err := c.cc.Invoke(ctx, "/defense.DefenseService/QueryAllDefenses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DefenseServiceServer is the server API for DefenseService service.
// All implementations must embed UnimplementedDefenseServiceServer
// for forward compatibility
type DefenseServiceServer interface {
	QueryAllDefenses(context.Context, *EmptyRequest) (*QueryAllDefensesReply, error)
	mustEmbedUnimplementedDefenseServiceServer()
}

// UnimplementedDefenseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDefenseServiceServer struct {
}

func (UnimplementedDefenseServiceServer) QueryAllDefenses(context.Context, *EmptyRequest) (*QueryAllDefensesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllDefenses not implemented")
}
func (UnimplementedDefenseServiceServer) mustEmbedUnimplementedDefenseServiceServer() {}

// UnsafeDefenseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DefenseServiceServer will
// result in compilation errors.
type UnsafeDefenseServiceServer interface {
	mustEmbedUnimplementedDefenseServiceServer()
}

func RegisterDefenseServiceServer(s grpc.ServiceRegistrar, srv DefenseServiceServer) {
	s.RegisterService(&DefenseService_ServiceDesc, srv)
}

func _DefenseService_QueryAllDefenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefenseServiceServer).QueryAllDefenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defense.DefenseService/QueryAllDefenses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefenseServiceServer).QueryAllDefenses(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DefenseService_ServiceDesc is the grpc.ServiceDesc for DefenseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DefenseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "defense.DefenseService",
	HandlerType: (*DefenseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryAllDefenses",
			Handler:    _DefenseService_QueryAllDefenses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "defense.proto",
}
